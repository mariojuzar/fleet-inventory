// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks_repository

import (
	context "context"

	model "github.com/mariojuzar/fleet-inventory/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// SpaceCraftRepository is an autogenerated mock type for the SpaceCraftRepository type
type SpaceCraftRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *SpaceCraftRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *SpaceCraftRepository) Fetch(ctx context.Context, filter *model.SpaceCraftFetchFilter) ([]model.SpaceCraft, error) {
	ret := _m.Called(ctx, filter)

	var r0 []model.SpaceCraft
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SpaceCraftFetchFilter) ([]model.SpaceCraft, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SpaceCraftFetchFilter) []model.SpaceCraft); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SpaceCraft)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SpaceCraftFetchFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *SpaceCraftRepository) Get(ctx context.Context, id int) (*model.SpaceCraft, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.SpaceCraft
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.SpaceCraft, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.SpaceCraft); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SpaceCraft)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *SpaceCraftRepository) Insert(ctx context.Context, _a1 *model.SpaceCraft) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SpaceCraft) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, _a2
func (_m *SpaceCraftRepository) Update(ctx context.Context, id int, _a2 *model.SpaceCraftUpdate) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *model.SpaceCraftUpdate) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSpaceCraftRepository creates a new instance of SpaceCraftRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpaceCraftRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpaceCraftRepository {
	mock := &SpaceCraftRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
